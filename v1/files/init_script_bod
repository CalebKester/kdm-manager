
### DO NOT MAKE ANY CHANGES BELOW THIS LINE


#	functions

server_is_running () {

    # returns a 0 if the server is running, i.e. if the PID exists in the
    # installed pid directory

    if [[ -e "$PID_ROOT_DIR/server.pid" ]]; then
        return 0 
    else
        return 1
    fi

}

preflight () {
    
    # this is why the script runs as root: this module forcibly creates the
    # required directories in /var/ that are necessary for the server to run

	mkdir $LOG_ROOT_DIR > /dev/null 2>&1
	chown -R $USERNAME: $LOG_ROOT_DIR > /dev/null 2>&1
	mkdir $PID_ROOT_DIR > /dev/null 2>&1
	chown -R $USERNAME: $PID_ROOT_DIR > /dev/null 2>&1
}

toggle_server () {
	su - $USERNAME -c "cd $APP_ROOT_DIR/v1; ./server.py"
}

start_server () {

    if server_is_running $1; then
        echo "Server is already running! Exiting..."
        exit 1
    fi

	preflight
    toggle_server
    sleep 2
}

stop_server () {

    if server_is_running $1; then
        toggle_server
    else
        echo "Server is not running! Exiting..."
        exit 1
    fi


}

print_status () {

    # if the server is running, dump a quick status, including a human-readable
    # dump of ps info and a generic stat

    if server_is_running $1; then
        echo ""
        ps -p `cat $PID_ROOT_DIR/server.pid` -o pid,vsz=MEMORY -o user,group=GROUP -o comm,args=ARGS
        echo ""
        stat "$PID_ROOT_DIR/server.pid"
        echo ""
    else
        echo "Server is not running! Exiting..."
        exit 1
    fi

}



#
#       RUNTIME
#

# 	sanity checks

if [ $EUID -ne 0 ]; then
    echo -e "\n This script must be run as root!\n"
    exit 1
fi

if [ $# -eq 0 ]; then
    echo -e "\n Argument required! Usage:\n\n  $0 {start|stop|restart|runmode}\n"
    exit 1
fi


#	try to run the requested command

case "$1" in
    start)
		start_server
        ;;
    stop)
        stop_server
        ;;
    status)
        print_status
        ;;
    *)
        echo "Usage: $0 {start|stop|status}" >&2
        exit 3
esac


