#!/usr/bin/env python

### BEGIN INIT INFO
# Provides:	  kdm-manager
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the CGI application server 
# Description:       starts the CGI application server
### END INIT INFO

import ConfigParser
import os
import pwd
import shutil
import subprocess
import sys
import time



#   get settings before we do anything else
try:
    config_file_path = "/home/toconnell/kdm-manager/v1/settings.cfg"
    settings = ConfigParser.ConfigParser()
    settings.readfp(open(config_file_path))
except:
    raise Exception("Settings could not be loaded!")


#   helpers and functions

def dir_check():
    """ Iterates over 'required_directories' list within the function and
    creates any directory in that list that does not exist. """

    required_directories = [
        settings.get("application","log_dir"),
        os.path.dirname(settings.get("server","pid_file")),
    ]

    for d in required_directories:
        if not os.path.isdir(d):
            shutil.os.mkdir(d)
            sys.stderr.write(" Created '%s' directory!\n" % d)
        os.chown(d, int(settings.get("server", "uid")), -1)


def toggle_server():
    """ Executes the "server.py" command in the server's cwd (as determined by
    the effective user's ID and name). The result is that the server starts if
    stopped, and stops if started.

    i.e. execute this function twice in a row for a restart. """

    pid_file_path = settings.get("server","pid_file")
    if os.path.isfile(pid_file_path):
        sys.stderr.write(" Stopping kdm-manager...\n")
    else:
        sys.stderr.write(" Starting kdm-manager...\n")

    # set our key environment/path vars from the UID/GID in the cfg
    e_uid = settings.getint("server", "uid")
    e_gid = settings.getint("server", "gid")
    u_name = pwd.getpwuid(e_uid)[0]
    egg_cache_path = "/home/%s/.python-eggs" % u_name
    server_cwd = "/home/%s/kdm-manager/v1" % u_name

    # now change gid and uid (in that order: only root can change gid)
    sys.stderr.write(" Setting uid/gid to %s/%s...\n" % (e_uid, e_gid))
    os.setgid(e_gid)
    os.setuid(e_uid)

    #   work around egg cache issues with funky easy_install setups
    if not os.path.isdir(egg_cache_path):
        sys.stderr.write(" User '%s' (uid = %s) does not have a '~./python-eggs' directory!\n" % (u_name, settings.getint("server", "uid")))
        sys.stderr.write(" Attempting to create ~/.python-eggs as uid = %s / gid = %s...\n" % (os.getuid(), os.getgid()) )
        try:
            os.mkdir(egg_cache_path)
        except Exception as e:
            raise
            sys.exit()
        sys.stdout.write(" Created egg cache dir '%s'\n" % egg_cache_path)
    os.environ['PYTHON_EGG_CACHE'] = egg_cache_path

    os.chdir(server_cwd)
    sys.stderr.write(" CWD is %s\n" % os.getcwd())

    p = subprocess.Popen("./server.py", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    stdout_value, stderr_value = p.communicate()
    sys.stderr.write(" STDOUT: %s\n STDERR: %s\n" % (stdout_value, stderr_value))


if __name__ == "__main__":

    if not len(sys.argv) >= 2:
        print("\n %s {start|stop|restart}\n" % sys.argv[0])
        sys.exit(1)

    command = sys.argv[1]
    dir_check()

    if command in ["start", "stop"]:
        toggle_server()
    elif command == "restart":
        toggle_server()
        time.sleep(1)
        toggle_server()
