#!/usr/bin/env python

### BEGIN INIT INFO
# Provides:	  kdm-manager
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the CGI application server 
# Description:       starts the CGI application server
### END INIT INFO

import ConfigParser
import os
import pwd
import shutil
import subprocess
import sys
import time



#   get settings before we do anything else
try:
    config_file_path = "/home/toconnell/kdm-manager/v1/settings.cfg"
    settings = ConfigParser.ConfigParser()
    settings.readfp(open(config_file_path))
except:
    raise Exception("Settings could not be loaded!")


# helper and admin functions

def set_env_vars():
    """ Sets the necessary python variables for doing server operations. """
    global e_uid
    global e_gid
    global u_name
    global egg_cache_path
    global server_cwd
    global pid_file_path
    e_uid = settings.getint("server", "uid")
    e_gid = settings.getint("server", "gid")
    u_name = pwd.getpwuid(e_uid)[0]
    egg_cache_path = "/home/%s/.python-eggs" % u_name
    server_cwd = "/home/%s/kdm-manager/v1" % u_name
    pid_file_path = settings.get("server","pid_file")


def dir_check():
    """ Iterates over 'required_directories' list within the function and
    creates any directory in that list that does not exist. """

    required_directories = [
        settings.get("application","log_dir"),
        os.path.dirname(settings.get("server","pid_file")),
    ]

    for d in required_directories:
        if not os.path.isdir(d):
            shutil.os.mkdir(d)
            sys.stderr.write(" Created '%s' directory!\n" % d)
        os.chown(d, int(settings.get("server", "uid")), -1)


# actual server functionality

def server():
    """ Runs the server command. Assumes that the CWD is correct, etc. Don't
    call this function until you've at LEAST called set_env_vars(). """

    # first, change the working directory to the home of the server script
    os.chdir(server_cwd)
    sys.stderr.write(" CWD is %s\n" % os.getcwd())

    # now, call the server script as a subprocess
    p = subprocess.Popen("./server.py", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    stdout_value, stderr_value = p.communicate()
    sys.stderr.write(" STDOUT: %s\n STDERR: %s\n" % (stdout_value, stderr_value))


def toggle_server():
    """ Executes the "server.py" command in the server's cwd (as determined by
    the effective user's ID and name). The result is that the server starts if
    stopped, and stops if started.

    i.e. execute this function twice in a row for a restart. """

    # first, set the globals
    set_env_vars()

    # now print a custom message to STDOUT so that the admin knows what's
    #   about to pop off up in this piece
    if os.path.isfile(pid_file_path):
        sys.stderr.write(" Stopping kdm-manager...\n")
    else:
        sys.stderr.write(" Starting kdm-manager...\n")

    # now change gid and uid (in that order: only root can change gid)
    sys.stderr.write(" Setting uid/gid to %s/%s...\n" % (e_uid, e_gid))
    os.setgid(e_gid)
    os.setuid(e_uid)

    #   work around egg cache issues with funky easy_install setups
    if not os.path.isdir(egg_cache_path):
        sys.stderr.write(" User '%s' (uid = %s) does not have a '~./python-eggs' directory!\n" % (u_name, settings.getint("server", "uid")))
        sys.stderr.write(" Attempting to create ~/.python-eggs as uid = %s / gid = %s...\n" % (os.getuid(), os.getgid()) )
        try:
            os.mkdir(egg_cache_path)
        except Exception as e:
            raise
            sys.exit()
        sys.stdout.write(" Created egg cache dir '%s'\n" % egg_cache_path)
    os.environ['PYTHON_EGG_CACHE'] = egg_cache_path

    # finally, run the server script (which toggles by default)
    server()


def change_run_mode(run_mode="production"):
    """ Toggles in and out of downtime. This includes an nginx restart and
    modifies the symlinks in /etc/nginx/sites-enabled so it's not a fucking
    toy. YHBW. """
    set_env_vars()

    if os.getuid() != 0:
        sys.stdout.write("This may only be done as root. Exiting...\n")
        sys.exit(255)
    elif run_mode not in ["production","downtime","default"]:
        sys.stdout.write("The run mode '%s' is not a valid run mode. Exiting...\n" % run_mode)
        sys.exit(255)

    if os.path.isfile(pid_file_path):
        sys.stdout.write(" Stopping kdm-manager...\n")
        server()

    # stop nginx
    sys.stdout.write(" Stopping nginx...\n")
    p = subprocess.Popen("/etc/init.d/nginx stop", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    stdout_value, stderr_value = p.communicate()
    sys.stderr.write(" STDOUT: %s\n STDERR: %s\n" % (stdout_value, stderr_value))

    # now switch run modes
    config_file_path = settings.get("server", "nginx_config")
    if os.path.islink(config_file_path):
        sys.stdout.write(" Removing synlink: '%s'\n" % config_file_path)
        shutil.os.remove(config_file_path)
    elif os.path.isfile(config_file_path):
        sys.stderr.write(" The file '%s' is not a symlink! Exiting...\n" % config_file_path)
        sys.exit(255)

    # now, write the appropriate symlink, based on the mode we're switching to
    sys.stdout.write(" Changing to '%s' run mode...\n" % run_mode)
    run_mode_file = os.path.join(server_cwd, "nginx", run_mode)
    os.symlink(run_mode_file, config_file_path)

    # start nginx
    sys.stdout.write(" Starting nginx...\n")
    p = subprocess.Popen("/etc/init.d/nginx start", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    stdout_value, stderr_value = p.communicate()
    sys.stderr.write(" STDOUT: %s\n STDERR: %s\n" % (stdout_value, stderr_value))

    if run_mode == "production":
        sys.stdout.write(" Run mode changed! Restart kdm-manager if it is not currently running!\n\n")

if __name__ == "__main__":

    if not len(sys.argv) >= 2:
        print("\n %s {start|stop|restart|downtime|production}\n" % sys.argv[0])
        sys.exit(1)

    command = sys.argv[1]
    dir_check()

    if command in ["start", "stop"]:
        toggle_server()
    elif command == "downtime":
        change_run_mode("downtime")
    elif command == "production":
        change_run_mode()
    elif command == "restart":
        toggle_server()
        time.sleep(1)
        toggle_server()
